---
description: Startup Process Rules
globs: **/start-ngrok.sh, **/cleanup.sh, /package.json, **/pm2.config.json
---
globs: 
  - "**/start-ngrok.sh"
  - "**/cleanup.sh"
  - "**/package.json"
  - "**/pm2.config.json"

# Application Startup Process

## Critical Order of Operations

1. **Cleanup Phase**
   ```bash
   ./cleanup.sh
   ```
   - Kills all existing ngrok processes
   - Terminates processes on ports:
     - 3000 (Frontend)
     - 3001 (Dev Phone)
     - 8081 (WebSocket Server)
     - 4040 (Ngrok Interface)
   - Verifies all ports are free before proceeding
   - Handles process cleanup with multiple retries
   - Provides detailed status feedback

2. **Ngrok Setup**
   ```bash
   ./start-ngrok.sh
   ```
   - Starts ngrok with fixed domain: mereka.ngrok.io
   - Verify tunnel is active at http://localhost:4040
   - Wait for tunnel to be established before proceeding
   - Check ngrok logs for successful connection

3. **WebSocket Server**
   ```bash
   cd websocket-server && npm run dev
   ```
   - Starts after ngrok is confirmed running
   - Verify server is up at https://mereka.ngrok.io/health
   - Check logs for successful startup message
   - Verify CORS configuration is active
   - Confirm WebSocket heartbeat is running
   - Check status endpoint at https://mereka.ngrok.io/status

4. **Frontend (Webapp)**
   ```bash
   cd webapp && PORT=3000 npm run dev
   ```
   - Must start after websocket server is running
   - Explicitly use port 3000
   - Verify access at http://localhost:3000
   - Check browser console for connection status
   - Verify WebSocket connection is established

5. **Dev Phone (Optional)**
   ```bash
   twilio dev-phone
   ```
   - Start in separate terminal
   - Runs independently on port 1337
   - Access at http://localhost:1337

## Health Verification

Before considering the system ready, verify:

1. **WebSocket Server Health**
   ```bash
   curl https://mereka.ngrok.io/health
   ```
   Expected response:
   ```json
   {
     "status": "ok",
     "timestamp": "2025-02-17T22:50:27.484Z",
     "services": {
       "websocket": true,
       "ngrok": true
     }
   }
   ```

2. **Connection Status**
   ```bash
   curl https://mereka.ngrok.io/status
   ```
   Expected response:
   ```json
   {
     "status": "ok",
     "uptime": 123.45,
     "connections": 1,
     "timestamp": "2025-02-17T22:50:27.484Z"
   }
   ```

3. **Frontend Connectivity**
   - Check browser console for WebSocket connection
   - Verify no CORS errors in console
   - Confirm health checks are passing
   - Check setup checklist completion

// ... rest of the existing content ...